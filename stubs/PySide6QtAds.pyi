from enum import Enum
from typing import List, ClassVar, Optional, Dict, overload, override, Sequence

from PySide6.QtCore import QSize, QObject, QEvent, Signal, Qt, QSettings, QRect, QXmlStreamWriter, QPoint, QXmlStreamReader
from PySide6.QtWidgets import QWidget, QFrame, QToolBar, QSplitter, QMenu, QAbstractButton, QLabel, QToolButton, QScrollArea, QPushButton
from PySide6.QtGui import QIcon, QAction, QColor


class DockWidgetArea(Enum):
    NoDockWidgetArea = 0x00
    LeftDockWidgetArea = 0x01
    RightDockWidgetArea = 0x02
    TopDockWidgetArea = 0x04
    BottomDockWidgetArea = 0x08
    CenterDockWidgetArea = 0x10

NoDockWidgetArea = DockWidgetArea.NoDockWidgetArea
LeftDockWidgetArea = DockWidgetArea.LeftDockWidgetArea
RightDockWidgetArea = DockWidgetArea.RightDockWidgetArea
TopDockWidgetArea = DockWidgetArea.TopDockWidgetArea
BottomDockWidgetArea = DockWidgetArea.BottomDockWidgetArea
CenterDockWidgetArea = DockWidgetArea.CenterDockWidgetArea
InvalidDockWidgetArea:DockWidgetArea
OuterDockAreas:DockWidgetArea
AllDockAreas:DockWidgetArea


class TitleBarButton(Enum):
    TitleBarButtonTabsMenu = 0
    TitleBarButtonUndock = 1
    TitleBarButtonClose = 2
    TitleBarButtonAutoHide = 3

TitleBarButtonTabsMenu = TitleBarButton.TitleBarButtonTabsMenu
TitleBarButtonUndock = TitleBarButton.TitleBarButtonUndock
TitleBarButtonClose = TitleBarButton.TitleBarButtonClose
TitleBarButtonAutoHide = TitleBarButton.TitleBarButtonAutoHide

class eDragState(Enum):
    DraggingInactive = 0 
    DraggingMousePressed = 1
    DraggingTab = 2
    DraggingFloatingWidget = 3

DraggingInactive = eDragState.DraggingInactive
DraggingMousePressed = eDragState.DraggingMousePressed
DraggingTab = eDragState.DraggingTab
DraggingFloatingWidget = eDragState.DraggingFloatingWidget

class eIcon(Enum):
    TabCloseIcon = 0
    AutoHideIcon = 1
    DockAreaMenuIcon = 2
    DockAreaUndockIcon = 3
    DockAreaCloseIcon = 4
    IconCount  = 5

TabCloseIcon = eIcon.TabCloseIcon
AutoHideIcon = eIcon.AutoHideIcon
DockAreaMenuIcon = eIcon.DockAreaMenuIcon
DockAreaUndockIcon = eIcon.DockAreaUndockIcon
DockAreaCloseIcon = eIcon.DockAreaCloseIcon
IconCount = eIcon.IconCount


class eBitwiseOperator(Enum):
    BitwiseAnd = 0
    BitwiseOr = 1

BitwiseAnd = eBitwiseOperator.BitwiseAnd
BitwiseOr = eBitwiseOperator.BitwiseOr

class SideBarLocation(Enum):
    SideBarTop = 0
    SideBarLeft = 1
    SideBarRight = 2
    SideBarBottom = 3
    SideBarNone = 4

SideBarTop = SideBarLocation.SideBarTop
SideBarLeft = SideBarLocation.SideBarLeft
SideBarRight = SideBarLocation.SideBarRight
SideBarBottom = SideBarLocation.SideBarBottom
SideBarNone = SideBarLocation.SideBarNone


class CDockWidgetTab(QFrame):
    def __init__(self, DockWidget:CDockWidget, parent:Optional[QWidget]) -> None: ...
    def isActiveTab(self) -> bool: ...
    def setActiveTab(self, active:bool) -> None: ...
    def setDockAreaWidget(self, DockArea:CDockAreaWidget) -> None: ...
    def dockAreaWidget(self) -> CDockAreaWidget: ...
    def dockWidget(self) -> CDockWidget: ...
    def setIcon(self, Icon:QIcon) -> None: ...
    def icon(self) -> QIcon: ...
    def text(self) -> str: ...
    def setText(self, title:str) -> None: ...
    def isTitleElided(self) -> bool: ...
    def isClosable(self) -> bool: ...
    @override
    def event(self, e:QEvent) -> bool: ...
    def setElideMode(self, mode:Qt.TextElideMode) -> None: ...
    def updateStyle(self) -> None: ...
    def iconSize(self) -> QSize: ...
    def setIconSize(self, Size:QSize) -> None: ...

    # Slots
    @override
    def setVisible(self, visible:bool) -> None: ...

    # Signals
    activeTabChanged:ClassVar[Signal]         # void activeTabChanged();
    clicked:ClassVar[Signal]                  # void clicked();
    closeRequested:ClassVar[Signal]           # void closeRequested();
    closeOtherTabsRequested:ClassVar[Signal]  # void closeOtherTabsRequested();
    moved:ClassVar[Signal]                    # void moved(const QPoint& GlobalPos);
    elidedChanged:ClassVar[Signal]            # void elidedChanged(bool elided);

class CDockAreaTabBar(QFrame):
    def __init__(self, parent:Optional[CDockAreaWidget]) -> None: ...
    def insertTab(self, Index:int, Tab:CDockWidgetTab) -> None: ...
    def removeTab(self, Tab:CDockWidgetTab) -> None: ...
    def count(self) -> int: ...
    def currentIndex(self) -> int: ...
    def currentTab(self) -> CDockWidgetTab: ...
    def tab(self, Index:int) -> CDockWidgetTab: ...
    @override
    def eventFilter(self, watched:QObject, event:QEvent) -> bool: ...
    def isTabOpen(self, Index:int) -> bool: ...
    @override
    def minimumSizeHint(self) -> QSize: ...
    @override
    def sizeHint(self) -> QSize: ...

    # Slots
    def setCurrentIndex(self, Index:int) -> None: ...
    def closeTab(self, Index:int) -> None: ...

    # Signals
    currentChanging : ClassVar[Signal]      # void currentChanging(int Index);
    currentChanged : ClassVar[Signal]       # void currentChanged(int Index);
    tabBarClicked : ClassVar[Signal]        # void tabBarClicked(int index);
    tabCloseRequested : ClassVar[Signal]    # void tabCloseRequested(int index);
    tabClosed : ClassVar[Signal]            # void tabClosed(int index);
    tabOpened : ClassVar[Signal]            # void tabOpened(int index);
    tabMoved : ClassVar[Signal]             # void tabMoved(int from, int to);
    removingTab : ClassVar[Signal]          # void removingTab(int index);
    tabInserted : ClassVar[Signal]          # void tabInserted(int index);
    elidedChanged : ClassVar[Signal]        # void elidedChanged(bool elided);

class CDockAreaTitleBar(QFrame):
    def __init__(self, parent:Optional[CDockAreaWidget]) -> None: ...
    def tabBar(self) -> CDockAreaTabBar: ...
    def button(self, which:TitleBarButton) -> QAbstractButton: ...
    def autoHideTitleLabel(self, ) -> CElidingLabel: ...
    def updateDockWidgetActionsButtons(self, ) -> None: ...
    @override
    def setVisible(self, Visible:bool) -> None: ...
    def insertWidget(self, index:int, widget:QWidget) -> None: ...
    def indexOf(self, widget:QWidget) -> int: ...
    def titleBarButtonToolTip(self, Button:TitleBarButton) -> str: ...
    
    # Slots
    def markTabsMenuOutdated(self) -> None: ...

    # Signal
    tabBarClicked: ClassVar[Signal]    # void tabBarClicked(int index);

class CDockAreaWidget(QFrame):

    class eDockAreaFlag(Enum):
        HideSingleWidgetTitleBar = 0x0001,
        DefaultFlags = 0x0000
    
    HideSingleWidgetTitleBar = eDockAreaFlag.HideSingleWidgetTitleBar
    DefaultFlags = eDockAreaFlag.DefaultFlags


    def __init__(self, DockManager:CDockManager, parent:CDockContainerWidget) -> None: ...
    def dockManager(self) -> CDockManager: ...
    def dockContainer(self) -> CDockContainerWidget: ...
    def autoHideDockContainer(self)  -> CAutoHideDockContainer: ...
    def isAutoHide(self) -> bool: ...
    def setAutoHideDockContainer(self, AutoHideDockContainer:CAutoHideDockContainer) -> None: ...
    @override
    def minimumSizeHint(self) -> QSize: ...
    def titleBarGeometry(self) -> QRect: ...
    def contentAreaGeometry(self) -> QRect: ...
    def dockWidgetsCount(self) -> int: ...
    def dockWidgets(self) -> List[CDockWidget]: ...
    def openDockWidgetsCount(self) -> int: ...
    def openedDockWidgets(self) -> List[CDockWidget]: ...
    def dockWidget(self, Index:int) -> CDockWidget: ...
    def currentIndex(self) -> int: ...
    def indexOfFirstOpenDockWidget(self) -> int: ...
    def currentDockWidget(self) -> CDockWidget: ...
    def setCurrentDockWidget(self, DockWidget:CDockWidget)-> None: ...
    def saveState(self, Stream:QXmlStreamWriter) -> None: ...
    def features(self, Mode:eBitwiseOperator = eBitwiseOperator.BitwiseAnd) -> CDockWidget.DockWidgetFeature: ...
    def titleBarButton(self, which:TitleBarButton) -> QAbstractButton: ...
    @override
    def setVisible(self, Visible:bool) -> None: ...
    def setAllowedAreas(self, areas:eDockAreaFlag) -> None: ...
    def allowedAreas(self) -> eDockAreaFlag: ...
    def titleBar(self) -> CDockAreaTitleBar: ...
    def dockAreaFlags(self) -> eDockAreaFlag: ...
    def setDockAreaFlags(self, Flags:eDockAreaFlag) -> None: ...
    def setDockAreaFlag(self, Flag:eDockAreaFlag, On:bool) -> None: ...
    def isCentralWidgetArea(self) -> bool: ...
    def containsCentralWidget(self) -> bool: ...
    def isTopLevelArea(self)  -> bool: ...

    @classmethod
    def restoreState(cls, Stream:CDockingStateReader, CreatedWidget:CDockAreaWidget, Testing:bool, ParentContainer:CDockContainerWidget) -> bool: ...        
    
    # Slots
    def setCurrentIndex(self, index:int) -> None: ...
    def closeArea(self) -> None: ...
    def setAutoHide(self, Enable:bool, Location:SideBarLocation = SideBarLocation.SideBarNone) -> None: ...
    def toggleAutoHide(self, Location:SideBarLocation = SideBarLocation.SideBarNone) -> None: ...
    def closeOtherAreas(self) -> None: ...
    
    # Signals
    tabBarClicked: ClassVar[Signal] 	# void tabBarClicked(int index);
    currentChanging: ClassVar[Signal] 	# void currentChanging(int index);
    currentChanged: ClassVar[Signal] 	# void currentChanged(int index);
    viewToggled: ClassVar[Signal] 		# void viewToggled(bool Open);    

class CDockComponentsFactory:
    def createDockWidgetTab(self, DockWidget:CDockWidget) -> CDockWidgetTab: ...
    def createDockWidgetSideTab(self, DockWidget:CDockWidget) -> CAutoHideTab: ...
    def createDockAreaTabBar(self, DockArea:CDockAreaWidget) -> CDockAreaTabBar: ...
    def createDockAreaTitleBar(self, DockArea:CDockAreaWidget) -> CDockAreaTitleBar: ...

    @classmethod
    def factory(cls) -> CDockComponentsFactory: ...
    @classmethod
    def setFactory(cls, Factory:CDockComponentsFactory) -> None:...
    @classmethod
    def resetDefaultFactory(cls)-> None:...

class CDockContainerWidget(QFrame):  
    def __init__(self, DockManager:CDockManager, parent:Optional[QWidget] = None) -> None: ...
    def addDockWidget(self, area:DockWidgetArea, Dockwidget:CDockWidget, DockAreaWidget:Optional[CDockAreaWidget]=None, Index:int=-1)-> CDockAreaWidget: ...
    def removeDockWidget(self, Dockwidget:CDockWidget)-> None: ...
    def zOrderIndex(self) -> int: ...
    def isInFrontOf(self, Other:CDockContainerWidget) -> bool: ...
    def dockAreaAt(self, GlobalPos:QPoint) -> CDockAreaWidget: ...
    def dockArea(self, Index:int) -> CDockAreaWidget: ...
    def openedDockAreas(self) -> List[CDockAreaWidget]: ...
    def openedDockWidgets(self) -> List[CDockWidget]: ...
    def hasOpenDockAreas(self) -> bool: ...
    def hasTopLevelDockWidget(self) -> bool: ...
    def dockAreaCount(self) -> int: ...
    def visibleDockAreaCount(self) -> int: ...
    def isFloating(self) -> bool: ...
    def dumpLayout(self)-> None: ...
    def features(self) -> CDockWidget.DockWidgetFeature: ...
    def floatingWidget(self) -> CFloatingDockContainer: ... 
    def closeOtherAreas(self, KeepOpenArea:CDockAreaWidget) -> None: ...
    def sideTabBar(self, area:SideBarLocation) -> CAutoHideSideBar: ...
    def autoHideWidgets(self) -> List[CAutoHideDockContainer]: ...
    def contentRect(self) -> QRect: ...
    def contentRectGlobal(self) -> QRect: ...
    def dockManager(self) -> CDockManager: ...

    #Signals
    def dockAreasAdded(self) -> None: ...
    def autoHideWidgetCreated(self, AutoHideWidget:CAutoHideDockContainer) -> None: ...
    def dockAreasRemoved(self) -> None: ...
    def dockAreaViewToggled(self, DockArea:CDockAreaWidget, Open:bool) -> None: ...

class CDockFocusController(QFrame):
    def __init__(self, DockManager:CDockManager) -> None: ...
    def notifyWidgetOrAreaRelocation(self, RelocatedWidget:QWidget) -> None: ...
    def notifyFloatingWidgetDrop(self, FloatingWidget:CFloatingDockContainer) -> None: ...
    def focusedDockWidget(self) -> CDockWidget: ...
    def setDockWidgetTabFocused(self, Tab:CDockWidgetTab) -> None: ...
    def clearDockWidgetFocus(self, dockWidget:CDockWidget) -> None: ...

    # Slots
    def setDockWidgetFocused(self, focusedNow:CDockWidget) -> None: ...

class CDockManager(CDockContainerWidget):
    
    class eConfigFlag(Enum):
        ActiveTabHasCloseButton = 0x0001                # If this flag is set, the active tab in a tab area has a close button
        DockAreaHasCloseButton = 0x0002                 # If the flag is set each dock area has a close button
        DockAreaCloseButtonClosesTab = 0x0004           # If the flag is set, the dock area close button closes the active tab, if not set, it closes the complete dock area
        OpaqueSplitterResize = 0x0008                   # See QSplitter::setOpaqueResize() documentation
        XmlAutoFormattingEnabled = 0x0010               # If enabled, the XML writer automatically adds line-breaks and indentation to empty sections between elements (ignorable whitespace).
        XmlCompressionEnabled = 0x0020                  # If enabled, the XML output will be compressed and is not human readable anymore
        TabCloseButtonIsToolButton = 0x0040             # If enabled the tab close buttons will be QToolButtons instead of QPushButtons - disabled by default
        AllTabsHaveCloseButton = 0x0080                 # if this flag is set, then all tabs that are closable show a close button
        RetainTabSizeWhenCloseButtonHidden = 0x0100     # if this flag is set, the space for the close button is reserved even if the close button is not visible
        DragPreviewIsDynamic = 0x0400                   # If opaque undocking is disabled, this flag defines the behavior of the drag preview window, if this flag is enabled, the preview will be adjusted dynamically to the drop area
        DragPreviewShowsContentPixmap = 0x0800          # If opaque undocking is disabled, the created drag preview window shows a copy of the content of the dock widget / dock are that is dragged
        DragPreviewHasWindowFrame = 0x1000              # If opaque undocking is disabled, then this flag configures if the drag preview is frameless or looks like a real window
        AlwaysShowTabs = 0x2000                         # If this option is enabled, the tab of a dock widget is always displayed - even if it is the only visible dock widget in a floating widget.
        DockAreaHasUndockButton = 0x4000                # If the flag is set each dock area has an undock button
        DockAreaHasTabsMenuButton = 0x8000              # If the flag is set each dock area has a tabs menu button
        DockAreaHideDisabledButtons = 0x10000           # If the flag is set disabled dock area buttons will not appear on the toolbar at all (enabling them will bring them back)
        DockAreaDynamicTabsMenuButtonVisibility = 0x20000 # If the flag is set, the tabs menu button will be shown only when it is required - that means, if the tabs are elided. If the tabs are not elided, it is hidden
        FloatingContainerHasWidgetTitle = 0x40000       # If set, the Floating Widget window title reflects the title of the current dock widget otherwise it displays the title set with `CDockManager::setFloatingContainersTitle` or application name as window title
        FloatingContainerHasWidgetIcon = 0x80000        # If set, the Floating Widget icon reflects the icon of the current dock widget otherwise it displays application icon
        HideSingleCentralWidgetTitleBar = 0x100000      # If there is only one single visible dock widget in the main dock container (the dock manager) and if this flag is set, then the titlebar of this dock widget will be hidden
                                                        # this only makes sense for non draggable and non floatable widgets and enables the creation of some kind of "central" widget
       
        FocusHighlighting = 0x200000                    # enables styling of focused dock widget tabs or floating widget titlebar
        EqualSplitOnInsertion = 0x400000                # if enabled, the space is equally distributed to all widgets in a  splitter

        FloatingContainerForceNativeTitleBar = 0x800000     # Linux only ! Forces all FloatingContainer to use the native title bar. This might break docking for FloatinContainer on some Window Managers (like Kwin/KDE).
                                                            # If neither this nor FloatingContainerForceCustomTitleBar is set (the default) native titlebars are used except on known bad systems.
                                                            # Users can overwrite this by setting the environment variable ADS_UseNativeTitle to "1" or "0".
        FloatingContainerForceQWidgetTitleBar = 0x1000000   # Linux only ! Forces all FloatingContainer to use a QWidget based title bar.
                                                            # If neither this nor FloatingContainerForceNativeTitleBar is set (the default) native titlebars are used except on known bad systems.
                                                            # Users can overwrite this by setting the environment variable ADS_UseNativeTitle to "1" or "0".
        MiddleMouseButtonClosesTab = 0x2000000,             # If the flag is set, the user can use the mouse middle button to close the tab under the mouse

    ActiveTabHasCloseButton = eConfigFlag.ActiveTabHasCloseButton
    DockAreaHasCloseButton = eConfigFlag.DockAreaHasCloseButton
    DockAreaCloseButtonClosesTab = eConfigFlag.DockAreaCloseButtonClosesTab
    OpaqueSplitterResize = eConfigFlag.OpaqueSplitterResize
    XmlAutoFormattingEnabled = eConfigFlag.XmlAutoFormattingEnabled
    XmlCompressionEnabled = eConfigFlag.XmlCompressionEnabled
    TabCloseButtonIsToolButton = eConfigFlag.TabCloseButtonIsToolButton
    AllTabsHaveCloseButton = eConfigFlag.AllTabsHaveCloseButton
    RetainTabSizeWhenCloseButtonHidden = eConfigFlag.RetainTabSizeWhenCloseButtonHidden
    DragPreviewIsDynamic = eConfigFlag.DragPreviewIsDynamic
    DragPreviewShowsContentPixmap = eConfigFlag.DragPreviewShowsContentPixmap
    DragPreviewHasWindowFrame = eConfigFlag.DragPreviewHasWindowFrame
    AlwaysShowTabs = eConfigFlag.AlwaysShowTabs
    DockAreaHasUndockButton = eConfigFlag.DockAreaHasUndockButton
    DockAreaHasTabsMenuButton = eConfigFlag.DockAreaHasTabsMenuButton
    DockAreaHideDisabledButtons = eConfigFlag.DockAreaHideDisabledButtons
    DockAreaDynamicTabsMenuButtonVisibility = eConfigFlag.DockAreaDynamicTabsMenuButtonVisibility
    FloatingContainerHasWidgetTitle = eConfigFlag.FloatingContainerHasWidgetTitle
    FloatingContainerHasWidgetIcon = eConfigFlag.FloatingContainerHasWidgetIcon
    HideSingleCentralWidgetTitleBar = eConfigFlag.HideSingleCentralWidgetTitleBar
    FocusHighlighting = eConfigFlag.FocusHighlighting
    EqualSplitOnInsertion = eConfigFlag.EqualSplitOnInsertion
    FloatingContainerForceNativeTitleBar = eConfigFlag.FloatingContainerForceNativeTitleBar
    FloatingContainerForceQWidgetTitleBar = eConfigFlag.FloatingContainerForceQWidgetTitleBar
    MiddleMouseButtonClosesTab = eConfigFlag.MiddleMouseButtonClosesTab
    DefaultDockAreaButtons:eConfigFlag
    DefaultBaseConfig:eConfigFlag
    DefaultOpaqueConfig:eConfigFlag
    DefaultNonOpaqueConfig:eConfigFlag
    NonOpaqueWithWindowFrame:eConfigFlag


    class eViewMenuInsertionOrder(Enum):
        MenuSortedByInsertion = 0
        MenuAlphabeticallySorted = 1
    
    MenuSortedByInsertion = eViewMenuInsertionOrder.MenuSortedByInsertion
    MenuAlphabeticallySorted = eViewMenuInsertionOrder.MenuAlphabeticallySorted

    class eAutoHideFlag(Enum):
        AutoHideFeatureEnabled = 0x01       # enables / disables auto hide feature
        DockAreaHasAutoHideButton = 0x02    # If the flag is set each dock area has a auto hide menu button
        AutoHideButtonTogglesArea = 0x04    # If the flag is set, the auto hide button enables auto hiding for all dock widgets in an area, if disabled, only the current dock widget will be toggled
        AutoHideButtonCheckable = 0x08      # If the flag is set, the auto hide button will be checked and unchecked depending on the auto hide state. Mainly for styling purposes.
        AutoHideSideBarsIconOnly = 0x10     # show only icons in auto hide side tab - if a tab has no icon, then the text will be shown
        AutoHideShowOnMouseOver = 0x20      # show the auto hide window on mouse over tab and hide it if mouse leaves auto hide container

    AutoHideFeatureEnabled = eAutoHideFlag.AutoHideFeatureEnabled
    DockAreaHasAutoHideButton = eAutoHideFlag.DockAreaHasAutoHideButton
    AutoHideButtonTogglesArea = eAutoHideFlag.AutoHideButtonTogglesArea
    AutoHideButtonCheckable = eAutoHideFlag.AutoHideButtonCheckable
    AutoHideSideBarsIconOnly = eAutoHideFlag.AutoHideSideBarsIconOnly
    AutoHideShowOnMouseOver = eAutoHideFlag.AutoHideShowOnMouseOver
    DefaultAutoHideConfig:eAutoHideFlag

    def __init__(self, parent:Optional[QWidget] = None) -> None: ...
    def addDockWidget(self, area:DockWidgetArea, Dockwidget:CDockWidget, DockAreaWidget:Optional[CDockAreaWidget] = None, Index:int = -1) -> CDockAreaWidget: ...
    def addDockWidgetToContainer(self, area:DockWidgetArea, Dockwidget:CDockWidget, DockContainerWidget:CDockContainerWidget) -> CDockAreaWidget: ...
    def addAutoHideDockWidget(self, Location:SideBarLocation, Dockwidget:CDockWidget) -> CAutoHideDockContainer: ...
    def addAutoHideDockWidgetToContainer(self, Location:SideBarLocation, Dockwidget:CDockWidget, DockContainerWidget:CDockContainerWidget) -> CAutoHideDockContainer: ...
    def addDockWidgetTab(self, area:DockWidgetArea, Dockwidget:CDockWidget) -> CDockAreaWidget: ...
    def addDockWidgetTabToArea(self, Dockwidget:CDockWidget, DockAreaWidget:CDockAreaWidget, Index:int = -1) -> CDockAreaWidget: ...
    def addDockWidgetFloating(self, Dockwidget:CDockWidget) -> CFloatingDockContainer: ...
    def findDockWidget(self,  ObjectName:str)  -> CDockWidget: ...
    def removeDockWidget(self, Dockwidget:CDockWidget) -> None: ...
    def dockWidgetsMap(self) -> Dict[str, CDockWidget]: ... 
    def dockContainers(self) -> List[CDockContainerWidget]: ... 
    def floatingWidgets(self) -> List[CFloatingDockContainer]: ... 
    @override
    def zOrderIndex(self)  -> int: ...
    def saveState(self, version:int = 0)  -> bytes: ...
    def restoreState(self, state:bytes, version:int = 0) -> bool: ...
    def addPerspective(self, UniquePrespectiveName:str )  -> None: ...
    def removePerspective(self, Name:str) -> None: ...
    def removePerspectives(self, Names:List[str]) -> None: ...
    def perspectiveNames(self) -> List[str]: ...
    def savePerspectives(self, Settings:QSettings)  -> None: ...
    def loadPerspectives(self, Settings:QSettings) -> None: ...
    def centralWidget(self) -> CDockWidget: ...
    def setCentralWidget(self, Widget:CDockWidget)-> CDockAreaWidget: ...
    def addToggleViewActionToMenu(self, ToggleViewAction:QAction, Group:str="", GroupIcon:QIcon=QIcon())-> QAction: ...
    def viewMenu(self) -> QMenu: ...
    def setViewMenuInsertionOrder(self, Order:eViewMenuInsertionOrder)-> None: ...
    def isRestoringState(self) -> bool: ...
    def focusedDockWidget(self) -> CDockWidget: ...

    @classmethod
    def configFlags(cls) -> eConfigFlag: ...
    @classmethod
    def autoHideConfigFlags(cls) -> eAutoHideFlag: ...
    @classmethod
    def setConfigFlags(cls, Flags:eConfigFlag) -> None: ...
    @classmethod
    def setAutoHideConfigFlags(cls, Flags:eAutoHideFlag) -> None: ...
    @classmethod
    def setConfigFlag(cls, Flag:eConfigFlag, On:bool = True) -> None: ...
    @classmethod
    def setAutoHideConfigFlag(cls, Flag:eAutoHideFlag, On:bool = True) -> None: ...
    @classmethod
    def testConfigFlag(cls, Flag:eConfigFlag) -> bool: ...
    @classmethod
    def testAutoHideConfigFlag(cls, Flag:eAutoHideFlag) -> bool: ...
    @classmethod
    def iconProvider(cls) -> CIconProvider: ...
    @classmethod
    def startDragDistance(cls) -> int: ...
    @classmethod
    def setFloatingContainersTitle(cls, Title:str) -> None: ...
    @classmethod
    def floatingContainersTitle(cls) -> str: ...


    # Slots
    def openPerspective(self, PerspectiveName:str) -> None: ...
    def setDockWidgetFocused(self, DockWidget:CDockWidget) -> None: ...
    def hideManagerAndFloatingWidgets(self) -> None: ...

    #Signals 
    perspectiveListChanged: ClassVar[Signal]           # void perspectiveListChanged();
    perspectiveListLoaded: ClassVar[Signal]            # void perspectiveListLoaded();
    perspectivesRemoved: ClassVar[Signal]              # void perspectivesRemoved();
    restoringState: ClassVar[Signal]                   # void restoringState();
    stateRestored: ClassVar[Signal]                    # void stateRestored();
    openingPerspective: ClassVar[Signal]               # void openingPerspective(const QString& PerspectiveName);
    perspectiveOpened: ClassVar[Signal]                # void perspectiveOpened(const QString& PerspectiveName);
    floatingWidgetCreated: ClassVar[Signal]            # void floatingWidgetCreated(ads::CFloatingDockContainer* FloatingWidget);
    dockAreaCreated: ClassVar[Signal]                  # void dockAreaCreated(ads::CDockAreaWidget* DockArea);
    dockWidgetAdded: ClassVar[Signal]                  # void dockWidgetAdded(ads::CDockWidget* DockWidget);
    dockWidgetAboutToBeRemoved: ClassVar[Signal]       # void dockWidgetAboutToBeRemoved(ads::CDockWidget* DockWidget);
    dockWidgetRemoved: ClassVar[Signal]                # void dockWidgetRemoved(ads::CDockWidget* DockWidget);
    focusedDockWidgetChanged: ClassVar[Signal]         # void focusedDockWidgetChanged(ads::CDockWidget* old, ads::CDockWidget* now);

class CDockSplitter(QSplitter):
    @overload
    def __init__(self, parent:Optional[QWidget] = None) -> None: ...
    @overload
    def __init__(self, orientation:Qt.Orientation, parent:Optional[QWidget] = None) -> None: ...

    def setSizes(self, sizes:Sequence[int]) -> None: ...
    def hasVisibleContent(self) -> bool: ...
    def firstWidget(self) -> QWidget: ...
    def lastWidget(self) -> QWidget: ...
    def isResizingWithContainer(self) -> bool: ...

class CDockOverlay(QFrame):
    class eMode(Enum):
        ModeDockAreaOverlay = 0
        ModeContainerOverlay = 1
    ModeDockAreaOverlay = eMode.ModeDockAreaOverlay
    ModeContainerOverlay = eMode.ModeContainerOverlay

    
    def __init__(self, parent:QWidget, Mode:eMode = eMode.ModeDockAreaOverlay) -> None: ...
    def setAllowedAreas(self, areas:DockWidgetArea) -> None: ...
    def allowedAreas(self) -> DockWidgetArea: ...
    def dropAreaUnderCursor(self) -> DockWidgetArea: ...
    def visibleDropAreaUnderCursor(self) -> DockWidgetArea: ...
    def showOverlay(self, target:QWidget) -> DockWidgetArea: ...
    def hideOverlay(self) -> None: ...
    def enableDropPreview(self, Enable:bool) -> None: ...
    def dropPreviewEnabled(self) -> bool: ...
    def dropOverlayRect(self) -> QRect: ...
    @override
    def event(self, e:QEvent) -> bool: ...

class CDockOverlayCross(QWidget):
    class eIconColor(Enum):
        FrameColor = 0
        WindowBackgroundColor = 1
        OverlayColor = 2
        ArrowColor = 3
        ShadowColor = 4
    FrameColor = eIconColor.FrameColor
    WindowBackgroundColor = eIconColor.WindowBackgroundColor
    OverlayColor = eIconColor.OverlayColor
    ArrowColor = eIconColor.ArrowColor
    ShadowColor = eIconColor.ShadowColor

    def __init__(self, overlay:CDockOverlay) -> None: ...
    def setIconColor(self, ColorIndex:eIconColor, Color:QColor) -> None: ...
    def iconColor(self, ColorIndex:eIconColor) -> QColor: ...
    def cursorLocation(self) -> DockWidgetArea: ...
    def setupOverlayCross(self, Mode:CDockOverlay.eMode) -> None: ...
    def updateOverlayIcons(self) -> None: ...
    def reset(self) -> None: ...
    def updatePosition(self) -> None: ...
    def setIconColors(self, Colors:str) -> None: ...
    
class CDockWidget(QFrame):
    class DockWidgetFeature(Enum):
        DockWidgetClosable = 0x001              # dock widget has a close button
        DockWidgetMovable = 0x002               # dock widget is movable and can be moved to a new position in the current dock container
        DockWidgetFloatable = 0x004             # dock widget can be dragged into a floating window
        DockWidgetDeleteOnClose = 0x008         # deletes the dock widget when it is closed
        CustomCloseHandling = 0x010             # clicking the close button will not close the dock widget but emits the closeRequested() signal instead
        DockWidgetFocusable = 0x020             # if this is enabled, a dock widget can get focus highlighting
        DockWidgetForceCloseWithArea = 0x040    # dock widget will be closed when the dock area hosting it is closed
        NoTab = 0x080                           # dock widget tab will never be shown if this flag is set
        DeleteContentOnClose = 0x100            # deletes only the contained widget on close, keeping the dock widget intact and in place. Attempts to rebuild the contents widget on show if there is a widget factory set.
        DockWidgetPinnable = 0x200              # dock widget can be pinned and added to an auto hide dock container
        NoDockWidgetFeatures = 0x000

    DockWidgetClosable = DockWidgetFeature.DockWidgetClosable
    DockWidgetMovable = DockWidgetFeature.DockWidgetMovable
    DockWidgetFloatable = DockWidgetFeature.DockWidgetFloatable
    DockWidgetDeleteOnClose = DockWidgetFeature.DockWidgetDeleteOnClose
    CustomCloseHandling = DockWidgetFeature.CustomCloseHandling
    DockWidgetFocusable = DockWidgetFeature.DockWidgetFocusable
    DockWidgetForceCloseWithArea = DockWidgetFeature.DockWidgetForceCloseWithArea
    NoTab = DockWidgetFeature.NoTab
    DeleteContentOnClose = DockWidgetFeature.DeleteContentOnClose
    DockWidgetPinnable = DockWidgetFeature.DockWidgetPinnable
    DefaultDockWidgetFeatures:DockWidgetFeature
    AllDockWidgetFeatures:DockWidgetFeature
    DockWidgetAlwaysCloseAndDelete:DockWidgetFeature
    NoDockWidgetFeatures = DockWidgetFeature.NoDockWidgetFeatures

    class eState(Enum):
        StateHidden = 0
        StateDocked = 1
        StateFloating = 2

    StateHidden = eState.StateHidden
    StateDocked = eState.StateDocked
    StateFloating = eState.StateFloating

    class eInsertMode(Enum):
        AutoScrollArea = 0
        ForceScrollArea = 1
        ForceNoScrollArea = 2
    
    AutoScrollArea = eInsertMode.AutoScrollArea
    ForceScrollArea = eInsertMode.ForceScrollArea
    ForceNoScrollArea = eInsertMode.ForceNoScrollArea

    class eMinimumSizeHintMode(Enum):
        MinimumSizeHintFromDockWidget = 0
        MinimumSizeHintFromContent = 1

    MinimumSizeHintFromDockWidget = eMinimumSizeHintMode.MinimumSizeHintFromDockWidget
    MinimumSizeHintFromContent = eMinimumSizeHintMode.MinimumSizeHintFromContent

    class eToggleViewActionMode(Enum):
        ActionModeToggle = 0
        ActionModeShow = 1
    
    ActionModeToggle = eToggleViewActionMode.ActionModeToggle
    ActionModeShow = eToggleViewActionMode.ActionModeShow

    def __init__(self, title:str, parent:Optional[QWidget] = None) -> None:...
    @override
    def minimumSizeHint(self) -> QSize: ...
    def setWidget(self, widget:QWidget, InsertMode:eInsertMode = eInsertMode.AutoScrollArea) -> None: ...
    def takeWidget(self) -> QWidget: ...
    def widget(self) -> QWidget: ...
    def tabWidget(self) -> CDockWidgetTab: ...
    def setFeatures(self, features:DockWidgetFeature) -> None: ...
    def setFeature(self, flag:DockWidgetFeature, on:bool) -> None: ...
    def features(self) -> DockWidgetFeature: ...
    def dockManager(self) -> CDockManager: ...
    def dockContainer(self) -> CDockContainerWidget: ...
    def floatingDockContainer(self) -> CFloatingDockContainer: ...
    def dockAreaWidget(self) -> CDockAreaWidget: ...
    def sideTabWidget(self) -> CAutoHideTab: ...
    def setSideTabWidget(self, SideTab:CAutoHideTab) -> None: ...
    def isAutoHide(self) -> bool: ...
    def autoHideDockContainer(self) -> CAutoHideDockContainer: ...
    def isFloating(self) -> bool: ...
    def isInFloatingContainer(self) -> bool: ...
    def isClosed(self) -> bool: ...
    def toggleViewAction(self) -> QAction: ...
    def setToggleViewActionMode(self, Mode:eToggleViewActionMode) -> None: ...
    def setMinimumSizeHintMode(self, Mode:eMinimumSizeHintMode) -> None: ...
    def isCentralWidget(self) -> bool: ...
    def setIcon(self, Icon:QIcon) -> None: ...
    def icon(self) -> QIcon: ...
    def toolBar(self) -> QToolBar: ...
    def createDefaultToolBar(self) -> QToolBar: ...
    def setToolBar(self, ToolBar:QToolBar) -> None: ...
    def setToolBarStyle(self, Style:Qt.ToolButtonStyle, State:eState) -> None: ...
    def toolBarStyle(self, State:eState) -> Qt.ToolButtonStyle: ...
    def setToolBarIconSize(self, IconSize:QSize, State:eState) -> None: ...
    def toolBarIconSize(self, State:eState) -> QSize: ...
    def setTitleBarActions(self, actions:List[QAction]) -> None: ...
    def titleBarActions(self) -> List[QAction]: ...
    def setTabToolTip(self, text:str) -> None: ...
    def isFullScreen(self) -> bool: ...
    def isTabbed(self) -> bool: ...
    def isCurrentTab(self) -> bool: ...
    @override
    def event(self, e:QEvent) -> bool: ...

    #Slots
    def toggleView(self, Open:bool=True) -> None: ...
    def setAsCurrentTab(self) -> None: ...
   # def raise(self) -> None: ...
    def setFloating(self) -> None: ...
    def deleteDockWidget(self) -> None: ...
    def closeDockWidget(self) -> None: ...
    def showFullScreen(self) -> None: ...
    def showNormal(self) -> None: ...
    def setAutoHide(self, Enable:bool, Location:SideBarLocation=SideBarLocation.SideBarNone) -> None: ...
    def toggleAutoHide(self, Location:SideBarLocation=SideBarLocation.SideBarNone) -> None: ...


    #Signals
    viewToggled:ClassVar[Signal]        # void viewToggled(bool Open);
    closed:ClassVar[Signal]             # void closed();
    titleChanged:ClassVar[Signal]       # void titleChanged(const QString& Title);
    topLevelChanged:ClassVar[Signal]    # void topLevelChanged(bool topLevel);
    closeRequested:ClassVar[Signal]     # void closeRequested();
    visibilityChanged:ClassVar[Signal]  # void visibilityChanged(bool visible);
    featuresChanged:ClassVar[Signal]    # void featuresChanged(ads::CDockWidget::DockWidgetFeatures features);

class CDockingStateReader(QXmlStreamReader):
    def setFileVersion(self, FileVersion:int) -> None: ...
    def fileVersion(self) -> int: ...

class CElidingLabel(QLabel):
    @overload
    def __init__(self, parent:Optional[QWidget] = None,  f:Qt.WindowType = Qt.WindowType.Widget) -> None: ...
    @overload
    def __init__(self, text:str, parent:Optional[QWidget]=None, f:Qt.WindowType=Qt.WindowType.Widget) -> None: ...

    def elideMode(self) -> Qt.TextElideMode: ...
    def setElideMode(self, mode:Qt.TextElideMode) -> None: ...
    def isElided(self) -> bool: ...

    @override
    def minimumSizeHint(self) -> QSize: ...
    @override
    def sizeHint(self) -> QSize: ...
    @override
    def setText(self, text:str) -> None: ...
    @override
    def text(self) -> str: ...

    # Signals
    clicked: ClassVar[Signal]       # void clicked();
    doubleClicked: ClassVar[Signal] # void doubleClicked();
    elidedChanged: ClassVar[Signal] # void elidedChanged(bool elided);

class CFloatingDockContainer(QWidget, IFloatingWidget):
    @overload
    def __init__(self, DockManager: CDockManager) -> None: ...
    @overload
    def __init__(self, DockArea: CDockAreaWidget) -> None: ...
    @overload
    def __init__(self, DockWidget: CDockWidget) -> None: ...

    def dockContainer(self) -> CDockContainerWidget: ...
    def isClosable(self) -> bool: ...
    def hasTopLevelDockWidget(self) -> bool: ...
    def topLevelDockWidget(self) -> CDockWidget: ...
    def dockWidgets(self) -> List[CDockWidget]: ...
    def hideAndDeleteLater(self) -> None: ...

class CFloatingDragPreview(QWidget):
    @overload
    def __init__(self, Content:CDockWidget) -> None: ...
    @overload
    def __init__(self, Content:CDockAreaWidget) -> None: ...

    def startFloating(self, DragStartMousePos:QPoint, Size:QSize, DragState:eDragState, MouseEventHandler:QWidget) -> None: ...
    def moveFloating(self) -> None: ...
    def finishDragging(self) -> None: ...
    def cleanupAutoHideContainerWidget(self) -> None: ...

    @override
    def eventFilter(self, watched:QObject, event:QEvent) -> bool: ...

    #Signals
    draggingCanceled:ClassVar[Signal]   # void draggingCanceled();

class IFloatingWidget:
    def startFloating(self, DragStartMousePos:QPoint, Size:QSize, DragState:eDragState, MouseEventHandler:QWidget) -> None: ...
    def moveFloating(self) -> None: ...
    def finishDragging(self) -> None: ...

class CIconProvider:
    def __init__(self) -> None: ...
    def customIcon(self, IconId: eIcon) -> QIcon: ...
    def registerCustomIcon(self, IconId:eIcon, icon:QIcon) -> None: ...

class CSpacerWidget(QWidget):
    def __init__(self, parent:Optional[QWidget] = None) -> None: ...

class CTitleBarButton(QToolButton):
    def __init__(self, visible:bool=True, parent:Optional[QWidget] = None) -> None: ...
    @override
    def setVisible(self, visible:bool) -> None: ...

class CAutoHideDockContainer(QFrame):
   # def __init__(self, DockWidget:CDockWidget, area:SideBarLocation, parent:CDockContainerWidget)-> None: ...
    def sideBar(self) -> CAutoHideSideBar: ...
    def autoHideTab(self) -> CAutoHideTab: ...
    def dockWidget(self) -> CDockWidget: ...
    def addDockWidget(self, DockWidget:CDockWidget) -> None: ...
    def sideBarLocation(self) -> SideBarLocation: ...
    def setSideBarLocation(self, SideBarLocation:SideBarLocation) -> None: ...
    def dockAreaWidget(self) -> CDockAreaWidget: ...
    def dockContainer(self) -> CDockContainerWidget: ...
    def moveContentsToParent(self) -> None: ...
    def cleanupAndDelete(self) -> None: ...
    def toggleView(self, Enable:bool) -> None: ...
    def collapseView(self, Enable:bool) -> None: ...
    def toggleCollapseState(self) -> None: ...
    def setSize(self, Size:int) -> None: ...


class CAutoHideSideBar(QScrollArea):
   # def __init__(self, parent:CDockContainerWidget, area:SideBarLocation) -> None: ...
    def removeTab(self, SideTab:CAutoHideTab) -> None: ...
    def insertDockWidget(self, Index:int, DockWidget:CDockWidget) -> CAutoHideDockContainer: ...
    def removeAutoHideWidget(self, AutoHideWidget:CAutoHideDockContainer) -> None: ...
    def addAutoHideWidget(self, AutoHideWidget:CAutoHideDockContainer) -> None: ...
    def orientation(self) -> Qt.Orientation: ...
    def tabAt(self, index:int) -> CAutoHideTab: ...
    def tabCount(self) -> int: ...
    def sideBarLocation(self) -> SideBarLocation: ...
    @override
    def minimumSizeHint(self) -> QSize: ...
    @override
    def sizeHint(self) -> QSize: ...
    def spacing(self) -> int: ...
    def setSpacing(self, Spacing:int) -> None: ...
    def dockContainer(self) -> CDockContainerWidget: ...

class CAutoHideTab(QPushButton):
   # def __init__(self, parent:Optional[QWidget] = None) -> None: ...
    def updateStyle(self) -> None: ...
    def sideBarLocation(self) -> SideBarLocation: ...
    def setOrientation(self, Orientation:Qt.Orientation) -> None: ...
    def orientation(self) -> Qt.Orientation: ...
    def isActiveTab(self) -> bool: ...
    def dockWidget(self) -> CDockWidget: ...
    def setDockWidget(self, DockWidget:CDockWidget) -> None: ...
    def iconOnly(self) -> bool: ...
    def sideBar(self) -> CAutoHideSideBar: ...
